import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'io.fabric'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.ygame.test"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        multiDexEnabled true

        externalNativeBuild {
            ndkBuild {
                if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
                    // skip the NDK Build step if PROP_NDK_MODE is none
                    targets 'MyGame'
                    arguments 'NDK_TOOLCHAIN_VERSION=4.9'
                    arguments 'APP_PLATFORM=android-'+PROP_APP_PLATFORM
                    
                    def module_paths = [project.file("../../cocos2d").absolutePath,
                                        project.file("../../cocos2d/cocos").absolutePath,
                                        project.file("../../cocos2d/external").absolutePath]
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        // should use '/'
                        module_paths = module_paths.collect {it.replaceAll('\\\\', '/')}
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(";")
                    }
                    else {
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(':')
                    }
                    
                    arguments '-j' + Runtime.runtime.availableProcessors()
                    abiFilters.addAll(PROP_APP_ABI.split(':').collect{it as String})
                }
            }
        }
    }

    sourceSets.main {
        java.srcDir "src"
        res.srcDir "res"
        manifest.srcFile "AndroidManifest.xml"
        assets.srcDir "../../Resources"
    }

    externalNativeBuild {
        ndkBuild {
            if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
                // skip the NDK Build step if PROP_NDK_MODE is none
                path "jni/Android.mk"
            }
        }
    }

    signingConfigs {

       release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibilityVersion
        targetCompatibility rootProject.ext.targetCompatibilityVersion
    }

    dexOptions {
        maxProcessCount 8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }

            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=0'
                }
            }
        }

        debug {
            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=1'
                }
            }
        }
    }
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
    maven { url 'https://maven.fabric.io/public' }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':libcocos2dx')
    compile project(':ykit-release')

    compile deps.supportDesign
    compile deps.appcompatv7
    compile deps.recyclerviewv7

    compile deps.multidex

    compile deps.firebaseCore
    compile deps.firebaseMessaging
    compile deps.firebaseConfig

    compile deps.playServicesAuth

    compile deps.billing

    compile(deps.crashlytics) { transitive = true; }
    compile(deps.answers) { transitive = true; }

    compile deps.butterknife
    annotationProcessor deps.butterknifeCompiler

    compile deps.dagger
    annotationProcessor deps.daggerCompiler

    compile deps.androidannotations
    annotationProcessor deps.androidannotationsCompiler

    compile deps.parceler
    annotationProcessor deps.parcelerCompiler

    compile deps.retrofit
    compile deps.retrofitConverterGson
    compile deps.retrofitAdapterRxjava

    compile deps.okhttp
    compile deps.okhttpInterceptor

    compile deps.gson

    compile deps.transitionseverywhere

    compile deps.glide
    annotationProcessor deps.glideCompiler

    compile deps.rxjava
    compile deps.rxandroid
    compile deps.rxrelay
    compile deps.rxlifecycle
    compile deps.rxlifecycleAndroid
    compile deps.rxlifecycleComponents

    compile deps.dbflow
    compile deps.dbflowCore
    compile deps.dbflowRx2

    compile deps.utilcode

    annotationProcessor deps.dbflowCompiler
    compile deps.timber

    compile deps.appsflyer

    compile deps.facebook

    debugCompile deps.leakcanary
    releaseCompile deps.leakcanaryNoOp
    testCompile deps.leakcanaryNoOp
//
//    debugCompile deps.blockcanary
//    releaseCompile deps.blockcanaryNoOp

    compile deps.stetho
    compile deps.stethoOkhttp3
    compile deps.stethoUrlconnection

//    debugCompile deps.tinydancer
//    releaseCompile deps.tinydancerNoOp
//    testCompile deps.tinydancerNoOp

    compile deps.traceur

    compile deps.logger

    compile(deps.loggingInterceptor) {
        exclude group: 'org.json', module: 'json'
    }
}

apply plugin: 'com.google.gms.google-services'